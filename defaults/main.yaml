--- !define

__INSTL_VERSION__:
  - 2         # major version e.g. python-batch
  - 4         # new major feature e.g. new command
  - 2         # new minor feature e.g. new option to command, new python batch class
  - 3         # bug fix, new param to pybatch class
__INSTL_VERSION_STR_SHORT__: $(__INSTL_VERSION__[0]).$(__INSTL_VERSION__[1]).$(__INSTL_VERSION__[2]).$(__INSTL_VERSION__[3])

# __INSTL_VERSION_STR_SHORT__ will be defined at run time by InstlInstanceBase.get_version_str
__INSTL_VERSION_STR_LONG__: "$(INSTL_EXEC_DISPLAY_NAME) version $(__INSTL_VERSION_STR_SHORT__) $(__COMPILATION_TIME__) $(__PLATFORM_NODE__)"

__USER_CONFIG_FILE_NAME__: instl_config.yaml
__USER_CONFIG_FILE_PATH__: $(__USER_HOME_DIR__)/$(__USER_CONFIG_FILE_NAME__)

PYTHON_BATCH_LOG_LEVEL: 20  # INFO

ACCEPTABLE_YAML_DOC_TAGS:
    - define_$(__CURRENT_OS__)
    - define_$(__CURRENT_OS_SECOND_NAME__)
    - define_if_not_exist_$(__CURRENT_OS__)
    - define_if_not_exist_$(__CURRENT_OS_SECOND_NAME__)

INSTL_EXEC_DISPLAY_NAME: instl

# instl version command will display: $(INSTL_EXEC_DISPLAY_NAME) version $(__INSTL_VERSION__)

TARGET_OS: $(__CURRENT_OS__)
TARGET_OS_SECOND_NAME: $(__CURRENT_OS_SECOND_NAME__)
TARGET_OS_NAMES: $(__CURRENT_OS_NAMES__)

Win_ALL_OS_NAMES:
    - Win
    - Win32
    - Win64

Mac_ALL_OS_NAMES:
    - Mac

BASE_REPO_REV: 1
LAST_PROGRESS: 0


# s3 urls are created with expiration time in seconds
# 60*60*24 = 86400 = 24 hours
S3_SECURE_URL_EXPIRATION: 86400

PRINT_COMMAND_TIME: yes

TAR_MANIFEST_FILE_NAME: __TAR_CONTENT__.txt

# e.g. 4&2 means repo-rev 123 becomes a folder hierarchy with 0 padding: 01/23
# NUM_DIGITS_REPO_REV_HIERARCHY should be multiple of NUM_DIGITS_PER_FOLDER_REPO_REV_HIERARCHY
# these values are default nd allow for 9999 repo-revs. Actual value should come from repository configuration
NUM_DIGITS_REPO_REV_HIERARCHY: 0
NUM_DIGITS_PER_FOLDER_REPO_REV_HIERARCHY: 0

WZLIB_EXTENSION: .wzip
ZLIB_COMPRESSION_LEVEL: 8  # 8 was tested to be the fastest zlib level to decompress

# ConfigVars that should not be written to batch file
DONT_WRITE_CONFIG_VARS:
    - __CREDENTIALS__
    - __HELP_SUBJECT__
    - __INSTL_DATA_FOLDER__
    - __INSTL_DEFAULTS_FOLDER__
    - __USER_TEMP_DIR__
    - AWS_.+
    - INDEX_SIG
    - INFO_MAP_SIG
    - PUBLIC_KEY
    - SVN_REVISION
    - .+_template
    - template_.+

--- !define_Win

XCOPY_PATH: xcopy.exe
ROBOCOPY_PATH: robocopy.exe
TASKLIST_PATH: tasklist.exe
CMD_TOOLS_TO_FIND_INTERNAL:
  - XCOPY_PATH
  - TASKLIST_PATH

--- !define
BATCH_EXT: py
DB_FILE_EXT: sqlite

# should configVars read from __environment__ be written to batch file created by instl?
WRITE_CONFIG_VARS_READ_FROM_ENVIRON_TO_BATCH_FILE: no

# in exec command, if the given python raises - re-raise the exception to cause non zero exit code
EXIT_ON_EXEC_EXCEPTION: False

# defaults if no acting user/group specifically given
ACTING_UID: "$(__USER_ID__)"
ACTING_GID: "$(__GROUP_ID__)"

SPECIAL_BUILD_IN_IIDS:
  - __ALL_ITEMS_IID__
  - __ALL_GUIDS_IID__
  - __UPDATE_INSTALLED_ITEMS__
  - __REPAIR_INSTALLED_ITEMS__

REPO_REV_FILE_BASE_NAME: $(REPO_NAME)_repo_rev.yaml
REPO_REV_FILE_SPECIFIC_NAME: $(REPO_NAME)_repo_rev.yaml.$(TARGET_REPO_REV)

FIX_ALL_PERMISSIONS_SYMBOLIC_MODE: u+rwx,go+rx
MKDIR_SYMBOLIC_MODE: 493  # 0o755

CONFIG_VAR_NAME_ENDING_DENOTING_PATH:
  - _DIR
  - _PATH
